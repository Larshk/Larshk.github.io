{"version":3,"sources":["./src/app/blocks/racetime/racetime.component.ts","./src/app/blocks/racetime/racetime.component.html","./src/environments/environment.ts","./src/app/services/local-openplanet/local-openplanet.service.ts","./src/app/blocks/speedometer/speedometer.component.ts","./src/app/blocks/speedometer/speedometer.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/live-race/live-race.component.ts","./src/app/live-race/live-race.component.html","./src/app/blocks/gearmeter/gearmeter.component.ts","./src/app/blocks/gearmeter/gearmeter.component.html","./src/app/app.module.ts","./src/app/pipes/race-timer-pipe.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-racetime',\n  templateUrl: './racetime.component.html',\n  styleUrls: ['./racetime.component.css']\n})\nexport class RacetimeComponent implements OnInit {\n  @Input() milliseconds: number;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"live-data-block\">{{ milliseconds | raceTimer }}</div>\n<p>Race timer</p>\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  wsEndpoint: 'ws://localhost:1337'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Injectable } from '@angular/core';\r\nimport { webSocket, WebSocketSubject } from 'rxjs/webSocket';\r\nimport { environment } from '../../../environments/environment';\r\nimport { catchError, tap, switchAll, delayWhen, retryWhen } from 'rxjs/operators';\r\nimport { EMPTY, Subject, timer } from 'rxjs';\r\nimport { Observable } from 'rxjs';\r\nimport { LiveUpdate } from './model/live-update';\r\nexport const WS_ENDPOINT = environment.wsEndpoint;\r\n\r\nconst RECONNECT_INTERVAL = 5000;\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalOpenplanetService {\r\n  private socket$: WebSocketSubject<any>;\r\n  public messagesSubject$ = new Subject<LiveUpdate>();\r\n\r\n  public connect(cfg: { reconnect: boolean } = { reconnect: false }): void {\r\n    if (!this.socket$ || this.socket$.closed) {\r\n      this.socket$ = this.getNewWebSocket();\r\n      this.socket$.subscribe(\r\n        msg => this.messagesSubject$.next(msg), // Called whenever there is a message from the server.\r\n        err => console.log(err), // Called if at any point WebSocket API signals some kind of error.\r\n        () => console.log('complete') // Called when connection is closed (for whatever reason).\r\n      );\r\n    }\r\n  }\r\n\r\n  private reconnect(observable: Observable<any>): Observable<any> {\r\n    return observable.pipe(\r\n      retryWhen(errors => errors.pipe(tap(val => console.log('[Data Service] Try to reconnect', val)), \r\n      delayWhen(_ => timer(RECONNECT_INTERVAL))))\r\n    ); \r\n  }\r\n\r\n  private getNewWebSocket() {\r\n    return webSocket({\r\n      url: WS_ENDPOINT,\r\n      closeObserver: {\r\n        next: () => {\r\n          console.log('[DataService]: connection closed');\r\n          this.socket$ = undefined;\r\n          this.connect({ reconnect: true });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  sendMessage(msg: any) {\r\n    this.socket$.next(msg);\r\n  }\r\n\r\n  close() {\r\n    this.socket$.complete();\r\n  }\r\n}\r\n","import { Component, Input, OnInit, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-speedometer',\n  templateUrl: './speedometer.component.html',\n  styleUrls: ['./speedometer.component.css']\n})\nexport class SpeedometerComponent implements OnInit {\n  @Input() numberValue: number;\n  \n  view: any[] = [400, 250];\n  unit: string = \"km/h\";\n  legend: boolean = false;\n  legendPosition: string = 'below';\n\n  colorScheme = {\n    domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\n  };\n\n  chartData = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.ngOnChanges();\n  }\n\n  ngOnChanges() {\n    this.chartData = [\n      {\n        name: 'Speed',\n        value: this.numberValue\n      }\n    ];\n  }\n\n  formatValue(value: number): string {\n    return \"\" + Math.floor(value);\n  }\n}\n","<div>\n    <ngx-charts-gauge\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [results]=\"chartData\"\n      [legend]=\"legend\"\n      [legendPosition]=\"legendPosition\"\n      [animations]=\"false\"\n      [max]=1000\n      [units]=\"unit\"\n      [valueFormatting]=\"formatValue\">\n    </ngx-charts-gauge>\n    <p>Current speed</p>\n  </div>","import { Component } from '@angular/core';\r\nimport { LocalOpenplanetService } from './services/local-openplanet/local-openplanet.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'tm-live';\r\n\r\n  constructor(private localOpenplanetService: LocalOpenplanetService) {\r\n    this.localOpenplanetService.connect();\r\n  }\r\n}\r\n","<app-live-race></app-live-race>\r\n","import { OnDestroy } from '@angular/core';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\nimport { LocalOpenplanetService } from '../services/local-openplanet/local-openplanet.service';\r\nimport { LiveUpdate } from '../services/local-openplanet/model/live-update';\r\n\r\n@Component({\r\n  selector: 'app-live-race',\r\n  templateUrl: './live-race.component.html',\r\n  styleUrls: ['./live-race.component.css']\r\n})\r\nexport class LiveRaceComponent implements OnInit, OnDestroy {\r\n  speed: number = 0;\r\n  gear: number = 0;\r\n  racetime: number = 0;\r\n  private liveData$: Subscription;\r\n\r\n  constructor(private localOpenplanetService: LocalOpenplanetService) {\r\n    this.localOpenplanetService.connect();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.liveData$ = this.localOpenplanetService.messagesSubject$.subscribe(\r\n      msg => {\r\n        this.speed = msg.speed;\r\n        this.gear = msg.gear;\r\n        this.racetime = msg.racetime;\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.liveData$.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"flexed\">\r\n    <app-speedometer numberValue=\"{{ speed }}\"></app-speedometer>\r\n    <app-gearmeter numberValue=\"{{ gear }}\"></app-gearmeter>\r\n    <app-racetime milliseconds=\"{{ racetime }}\"></app-racetime>\r\n</div>","import { Component, Input, OnInit, OnChanges } from '@angular/core';\n\n@Component({\n  selector: 'app-gearmeter',\n  templateUrl: './gearmeter.component.html',\n  styleUrls: ['./gearmeter.component.css']\n})\nexport class GearmeterComponent implements OnInit {\n  @Input() numberValue: number;\n  \n  view: any[] = [400, 250];\n  unit: string = \"\";\n  legend: boolean = false;\n  legendPosition: string = 'below';\n\n  colorScheme = {\n    domain: ['#5AA454', '#E44D25', '#CFC0BB', '#7aa3e5', '#a8385d', '#aae3f5']\n  };\n\n  chartData = [];\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.ngOnChanges();\n  }\n\n  ngOnChanges() {\n    this.chartData = [\n      {\n        name: 'Gear',\n        value: this.numberValue\n      }\n    ];\n  }\n}\n","<div>\n    <ngx-charts-linear-gauge\n      [view]=\"view\"\n      [scheme]=\"colorScheme\"\n      [value]=\"numberValue\"\n      [units]=\"unit\"\n      [animations]=\"false\"\n      [min]=\"1\"\n      [max]=\"5\">\n    </ngx-charts-linear-gauge>\n    <p>Current gear</p>\n  </div>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgxChartsModule } from '@swimlane/ngx-charts';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { LiveRaceComponent } from './live-race/live-race.component';\r\nimport { SpeedometerComponent } from './blocks/speedometer/speedometer.component';\r\nimport { GearmeterComponent } from './blocks/gearmeter/gearmeter.component';\r\nimport { RacetimeComponent } from './blocks/racetime/racetime.component';\r\nimport { RaceTimerPipe } from './pipes/race-timer-pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    RaceTimerPipe,\r\n    LiveRaceComponent,\r\n    SpeedometerComponent,\r\n    GearmeterComponent,\r\n    RacetimeComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    NgxChartsModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Pipe } from \"@angular/core\";\r\n\r\n@Pipe({name: 'raceTimer'})\r\nexport class RaceTimerPipe {\r\n    transform(value: number): string {\r\n        let minutes = Math.floor(value / 60000);\r\n        let seconds = Math.floor(value % 60000 / 1000);\r\n        let milliseconds = Math.floor(value % 1000);\r\n        return this.pad(minutes, 2) + \":\" + this.pad(seconds, 2) + \".\" + this.pad(milliseconds, 3);\r\n    }\r\n\r\n    private pad(num:number, size:number): string {\r\n        let s = num + \"\";\r\n        while (s.length < size) s = \"0\" + s;\r\n        return s;\r\n    }\r\n}","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}